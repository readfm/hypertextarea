<link href='/design/table.css' rel="stylesheet"/>
<div class='app' id='table'>
	<table id='table-head' class='full'>
		<thead><tr></tr></thead>
	</table>

	<table id='table-main'>
		<thead><tr></tr></thead>
		<tbody></tbody>
	</table>


	<table id='table-foot' class='full'>
		<tfoot><tr></tr></tfoot>
	</table>

	<footer id='filters'>
		<input id='table-search' placeholder='Search' class='icon i-search'/>
		<button class='super' id='table-plus'>Add new</button>
		<button class='super' id='table-remove'>Remove selected</button>
		<button class='super' id='table-email'>Send email</button>
		<button id='table-selectFields' style='float: right'>Fields</button>
	</footer>
</div>


<div id='table-askRemove' class='tip'>
	<span class="tri"></span>
	Really remove <span id='table-numRemove'>0</span> elements?
	<button id='table-doRemove'>ok</button>
</div>

<div class='tip' id='table-mailer'>
	<span class="tri"></span>
	<h5>Select template:</h5>
</div>

<div class='tip' id='table-itemStates'>
	<span class="tri"></span>
	<div class='option' name='active'>Active</div>
	<div class='option' name='disabled'>Disabled</div>
	<div class='option' name='waiting'>Waiting</div>
	<div class='option' name='rejected'>Rejected</div>
</div>


<div class='tip' id='table-fields'>
	<span class="tri"></span>
</div>

<script>

$(function(){
	var Table = window.Site.apps.table = window.Table = {
		build: function(d, $user){
			if(!$user) $user = Table.$row.clone();
		},

		$items: {},

		open: function(){

		},

		th: {},
		buildTh: function(d){
			$td = $('<th></th>');
			$td.data(d);
			$td.attr('id', 'th'+d.id);
			if(d.width) $td.css('width', parseInt(d.width));

			var $option = $('<div class="option choose v"></div>');
			$option.text(d.title);
			$option.data('id', d.id);
			$option.attr('id', 'ths'+d.id);
			$option.appendTo('#table-fields');


			$td.appendTo('#table-main > thead > tr');
			var $th = $td.clone(true);
			$th.text(d.title).appendTo(Table.$tHead);
			$th.addClass('sortable');
			Table.th[d.name] = $th;
			return $th;
		},

		sort: function(by){
			var $th = Table.th[by],
				desc = $th.hasClass('desc');
			if(!$th.hasClass('sortable')) return;
			Table.$tHead.children('.desc').removeClass('desc');
			Table.$tHead.children('.asc').removeClass('asc');
			$th.addClass(desc?'asc':'desc');
			Table.search();
		},

		buildFoot: function(d){
			$td = $("<td></td>");
			$td.data(d);
			if(d.width) $td.css('width', parseInt(d.width));
			var $input = $("<input name='"+d.name+"' placeholder='"+d.title+"'/>");

			if(d.pref){
				if(d.pref.input){
					var func = Table.filters[d.pref.input];
					if(typeof func == 'function')
						func($input, d.pref, d);
				}
				
			}
			else{
				$input.change(function(){
					Table.search();;
				});
			}

			$td.append($input);

			$td.appendTo('#table-foot > tfoot > tr');
		},


		filters: {
			number: function($inp, pref){
				$inp.attr('type', 'number').change(function(){
					Table.search();
				});
			},

			select: function($inp, pref, d){
				$inp.addClass('select').bindEnter(function(){
					Table.search();
				});

				var id = 'table-options'+d.id;
				if(!$('#'+id).length && pref.options){
					var $options = $("<div class='tip' id='"+id+"'></div>").insertAfter('#table');
					$options.append("<span class='tri'></span>");

					(pref.options || []).forEach(function(option){
						$("<div class='option'>"+option+"</div>").appendTo($options).click(function(){
							var $option = $(this);
							$('.tip').fadeOut(100);
							$('input.fcs').val($option.data('value') || $option.attr('name') || $option.text());
							Table.search();
						});
					});
				}

				$inp.tip({
					pos: 't',
					id: id,
					fix: 'w'
				});
			},

			state: function($inp, pref){
				$inp.addClass('select').change(function(){
					Table.search();
				});

				$inp.tip({
					pos: 't',
					id: 'table-itemStates',
					fix: 'c',
				});
			},

			range: function($inp, pref){
				$inp.tip({
					pos: 't',
					id: 'range',
					fix: 'c',
					ba: function(){
						$('#range').width(pref.width+20 || 100);
					},
					afterAppear: function(){
						var r = $inp.val().split('-'),
							multiply = $inp.data('multiply') || 1;
						var $slider = $('#range > .slider');

						var $s1 = $slider.children('span.sl:nth-of-type(1)'),
							$s2 = $slider.children('span.sl:nth-of-type(2)'),
							r1 = parseInt(r[0]) || 0,
							r2 = parseInt(r[1]);

						$slider.trigger('reset');
						if(!$inp.val()) $slider.trigger('reset');
						else{
							$s1.text(r1*multiply).trigger('updateValue', r1);
							$s2.text(r2*multiply).trigger('updateValue', r2);
						}
					}
				}).bindEnter(function(){
					Table.search();
				}).addClass('range');
			}
		},

		hideField: function(id){
			var $th = $('#th'+id).hide(),
				i = $th.index()+1;

			$('#table-main td:nth-child('+i+'), #table-main th:nth-child('+i+')').hide();
			$('#table-foot td:nth-child('+i+')').hide();
			$('#ths'+id).removeClass('v');
		},

		showField: function(id){
			var $th = $('#th'+id).show(),
				i = $th.index()+1;

			$('#table-main td:nth-child('+i+'), #table-main th:nth-child('+i+')').show();
			$('#table-foot td:nth-child('+i+')').show();
			$('#ths'+id).addClass('v');

			Table.checkFields();
		},

		checkFields: function(){
			//return console.log($('#table-main').width());
			while(
				$('#table').is(':visible') &&
				$('#table-main').width() &&
				$('#table').width() < $('#table-main').width()
			){
				var id = $('#table-head th:visible').last().data('id');
				Table.hideField(id);
			}
		},

		clean: function(){
			var $thead = $('#table-head > thead > tr').empty(),
				$th = $('#table-main > thead > tr').empty()
				$tfoot = $('#table-foot > tfoot > tr').empty();
			Table.th = {};
			Table.f = {};
			delete Table.onClick;
		},

		prepare: function(structure){
			Table.clean();

			Table.structure = structure;

			$('#table-fields').remove('option');

			var w = 40;
			$("<th>&#x2713;</th>").appendTo(Table.$tHead).innerWidth(w);
			$("<th></th>").appendTo('#table-main > thead > tr').width(w);
			var $footCheck = $("<td id='checkTr'></td>").appendTo(Table.$tFoot).width(w);
			$("<span class='check'></span>").appendTo($footCheck).click(function(ev){
				$(this).toggleClass('v');
				$('#table-main .checkTr>.check')[($(this).hasClass('v')?'add':'remove')+'Class']('v');

				ev.preventDefault();
				ev.stopPropagation();
				return false;
			});

			structure.forEach(function(col){
				Table.buildTh(col);
				Table.buildFoot(col);
			});
		},

		structures: {},
		loadStructure: function(tid, cb){
			Table.clean();
			if(false && Table.structures[tid]){
				Table.prepare(Table.structures[tid]);
				if(cb) cb();
			}
			else
				ws.send({
					cmd: 'load',
					filter: {tid: tid},
					sort: {pos: 1},
					collection: 'tree'
				},
				function(r){
					var struct = [];

					(r.items || []).forEach(function(item){
						struct.push(_.pick(item, 'name', 'id', 'title', 'width', 'pref'));
					});

					Table.structures[tid] = struct;
					Table.prepare(struct);

					if(cb) cb();
				});
		},

		editors: {},
		build: function(d){
			var $tr = $('<tr></tr>');
			$tr.data(d);

			var $check = $("<td class='checkTr'><span class='check v'></span></td>");
			$check.appendTo($tr);

			$check.children('.check').click(function(ev){
				$(this).toggleClass('v');
				ev.preventDefault();
				ev.stopPropagation();
				return false;
			});

			if(typeof Table.onClick == 'function'){
				$tr.click(function(){
					Table.onClick(d);
				});
			}
			Table.structure.forEach(function(col){
				var val = eval('d.'+col.name);
				var value = (typeof col.format == 'function')?col.format(val):val;
				var $td = $('<td>'+(value || '')+'</td>');
				$td.data('value', d[col.name]);
				$tr.append($td);

				var adm = Acc.user && (Acc.user.id ==  d.owner || Acc.user.super);
				if(typeof col.onSet == 'function') 
					col.onSet($td);

				if(col.pref){
					var mod = Table.mod[col.pref.mod];
					if(mod) mod($td);

					var func = Table.editors[col.pref.edit];
					if(adm && func)
						func($td);
				}
			});
			return $tr;
		},

		mod: {
			email: function($td){
				$td.addClass('email');
			},

			image: function($td){
				var id = parseInt($td.text());
				if(!id) return;

				$td.text('').click(function(ev){
					Img.show(id);

					ev.stopPropagation();
					return false;
				});

				var tryBig;
				var image = new Image;
				image.onload = function(){
					var h = $td.innerWidth()*image.height/image.width;

					$td.css({
						width: $td.innerWidth(),
						height: h,
						'background-image': "url("+image.src+")"
					}).data({
						width: image.width,
						height: image.height
					});
				}
				image.onerror = function(){
					if(!tryBig){
						tryBig = 1;
						image.src = "/"+id;
					}
				}
				image.src = "/"+id+"/thumb";
			}
		},

		load: function(f, cb){
			var $list = $('#table-main > tbody');

			if(!f) f = {};
			if(!f.filter) f.filter = {};

			$list.data(f);
			Table.f = f;

			if(!f.skip)
				$list.empty();

			ws.send($.extend({cmd: 'load'}, f), function(r){
				console.log(r);
				(r.items || []).forEach(function(item){
					var $row = Table.build(item);
					$list.append($row);
				});

				$('#checkTr > .check').addClass('v');

				$('#table-email').showIf($list.find('.email').length);

				if(cb) cb();
			});
		},

		collection: 'tree',
		limit: 100,
		search: function(s, cb){
			var f = {filter: (Table.filter || {}), sort: {}, skip: 0, limit: Table.limit, collection: Table.collection};


			if(Tree && Table.tid){
				f.filter.tid = parseInt(Table.tid);
				Tree.activate(Table.tid);
			}

			if(s === true){
				$('#filters').removeData();
				_.extend(f.filter, $('#filters').data());
			};


			 $('#table-foot input').each(function(){
			 	var $input = $(this),
			 		val = $input.val();
			 	if(val){
			 		console.log(val);
			 		if(this.type == 'number')
			 			f.filter[this.name] = parseInt(val);
			 		else
			 		if($input.hasClass('range')){
			 			var r = val.split('-'),
			 			r1 = parseInt(r[0]) || 0,
						r2 = parseInt(r[1]);

						var fl = f.filter[this.name] = {};
						fl.$gte = r1;
						if(!isNaN(r2)) fl.$lte = r2;
			 		}
			 		else
			 			f.filter[this.name] =  {'$regex': val, $options: 'i'};
			 	}
			 });


			if($('#table-search').val().length) f.filter.$text = {$search: $('#table-search').val()};

			Table.$tHead.children('.asc,.desc').each(function(){
				var d = $(this).data();
				console.log(d);
				f.sort[d.name] = $(this).hasClass('asc')?1:-1;
			});

			Table.load(f, cb);
		}
	}

	$('#table-fields').on('click', '.option', function(){
		var id = $(this).data('id');

		if($(this).hasClass('v'))
			Table.hideField(id);
		else
			Table.showField(id);
	});


	Table.checkFields();
	$(window).resize(function(){
		Table.checkFields();
	});


	Table.$tHead = $('#table-head > thead> tr');
	Table.$tHead.on('click', 'th', function(ev){
		var d = $(this).data();
		Table.sort(d.name);
	});
	Table.$tFoot = $('#table-foot > tfoot> tr');

	$('#table-itemStates > .option').click(function(){
		var name = $(this).attr('name');
		if($('.fcs').parents('#table-foot').length){
			$('.fcs').val(name);
			Table.search();
		}
		else if($('.fcs').parents('#table-main').length){
			$('.fcs > input').val(name);
			var item = $('.fcs').parents('tr').data();
			ws.send({
				cmd: 'update',
				collection: Table.collection,
				set: {
					state: name
				},
				id: item.id
			});
		}
		$('.tip').hide();
	});

	$('#table-search').bindEnter(function(){
		Table.search();
	});

	var $sl = $('#range > .slider').children('.sl');
	$sl.drag('end', function(ev, dd){
		if($('input.fcs').parents('#table-foot').length)
			Table.search();
	});

	if(Tree){
		Tree.types.table = function(item){
			Table.collection = item.collection || 'tree';
			if(item.collection) delete Table.tid;
			else Table.tid = item.id;

			Table.search();
		};
	}

	$('#table-plus').click(function(){
		Properties.new(Table.collection);
	});

	$('#table-doRemove').click(function(){
		$('#table-main .checkTr > .check.v').each(function(){
			var $tr = $(this).parent().parent(),
				id = $tr.data('id');

			ws.send({
				cmd: 'remove',
				id: id,
				collection: Table.collection
			});
			$tr.remove();
		});
	});

	$('#table-remove').tip({
		pos: 't',
		id: 'table-askRemove',
		fix: 'c',
		ba: function(){
			$('#table-numRemove').text($('#table .checkTr > .v').length);
		}
	});

	$('#table-selectFields').tip({
		pos: 't',
		id: 'table-fields',
		fix: 'c',
	});

	$('#table-fields > .option').click(function(){
		$(this).toggleClass('v');
	});

	$('#table-email').tip({
		pos: 't',
		id: 'table-mailer',
		fix: 'c',
	});

	ws.send({
		cmd: 'load',
		filter: {tid: 570},
		sort: {pos: 1},
		collection: 'tree'
	},
	function(r){
		var struct = [];

		var onClick = function(){
			var d = $(this).data();
			setTimeout(function(){
				alert('Emails was sent');
			}, 2000);
			
			$('.tip').hide();
		};

		(r.items || []).forEach(function(item){
			var $item = $("<div class='option'>"+item.title+"</div>");
			$item.data(item).click(onClick);
			$('#table-mailer').append($item);
		});
	});

	Table.editors.state = function($td, item){
		if(!Acc.user.super) return;
		
		var item = $td.parent().data();
		$td.addClass('noPadding');
		var value = $td.text();
		$td.empty();
		var $inp = $("<input/>").val(value).change(function(){
			ws.send({
				cmd: 'update',
				collection: Table.collection,
				set: {
					state: this.value
				},
				id: item.id
			});
		}).addClass('select');
		$td.append($inp).tip({
			pos: 't',
			id: 'table-itemStates',
			fix: 'c',
		});
	};
});
</script>